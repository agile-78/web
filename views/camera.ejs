<!DOCTYPE html> 
<html> 
<head> 
    
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/mobilenet"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/knn-classifier"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.15/dist/tailwind.min.css" rel="stylesheet"> 
    
</head> 
<body> 
    <div id="loading" class="h-screen w-screen flex flex-col justify-center items-center">
        <p class="max-w-lg text-3xl font-semibold leading-normal text-gray-900 dark:text-white">Loading...</p>
        <div class="tenor-gif-embed" data-postid="13456496" data-share-method="host" data-aspect-ratio="1.23333" data-width="50%">
        <a href="https://tenor.com/view/bt21-koya-koala-sleepy-loading-gif-13456496">Bt21 Koya Sticker</a> from <a href="https://tenor.com/search/bt21-stickers">Bt21 Stickers</a>
        </div>
        <script type="text/javascript" async src="https://tenor.com/embed.js"></script> 
    </div>
    <div class="container h-screen bg-purple-200 p-4 hidden" id="imageclassification">
        <h1 class="text-2xl font-bold text-blue-600">Image Scanning Page</h1>
        <div id="camera" class="image-preview mb-4">
            <video id="camera-stream" autoplay playsinline class="w-full max-h-60 border border-gray-300"></video>
            <div id="camera-off-message" class="camera-off-message">Camera not open</div>
        </div>
        <div class="flex justify-between items-center mb-4">
            <button id="camera-button" class=" flex-grow bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg mt-4 mr-1 ">Toggle Camera</button>
            <button id="capture-button" class=" flex-grow bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg mt-4 mx-1 ">Capture</button>
            <button id="retake-button" class=" flex-grow bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg mt-4 hidden ">Retake</button>
           
        </div>
        <div class="mb-4">
            <label for="image-input" class="file-upload-label bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg mt-4 ">Upload from Files</label>
            <input type="file" id="image-input" accept="image/jpeg, image/jpg, image/png" class="hidden">
            <button id="submit-button" class=" flex-grow bg-pink-500 hover:bg-pink-600 text-white font-bold py-2 px-4 rounded-lg mt-4 ">Submit</button>
        </div>
        <div class="border rounded-lg border-gray-300 p-4">
            <img id="uploaded-image" src="" alt="Upload Image" class="max-w-full max-h-60">
        </div>
        <div id="console" class="mt-4"></div>
    </div>
    
 
    <script> 
        // Get references to the necessary elements 
        const classifier = knnClassifier.create(); 
        const imageInput = document.getElementById('image-input'); 
        const cameraStream = document.getElementById('camera-stream'); 
        const submitButton = document.getElementById('submit-button'); 
        const cameraButton = document.getElementById('camera-button'); 
        const camera = document.getElementById('camera'); 
        const captureButton = document.getElementById('capture-button'); 
        const retakeButton = document.getElementById('retake-button'); 
        const uploadedImageElement = document.getElementById('uploaded-image'); 
        const cameraOffMessage = document.getElementById('camera-off-message'); 
 
        let mediaStream = null; 
        let isCameraActive = true; 
        
        let net; 
    
        mobilenet.load().then((loadedNet) => {
          net = loadedNet;{
          var loadingElement = document.getElementById("loading");
          loadingElement.style.display = "none";
          
          var imageclassificationElement = document.getElementById("imageclassification");
          imageclassificationElement.style.display = "block"
          
          // Automatically load images from the /data folder
          loadingImagesFromFolder("/data/plastic_bottles", 0);
          loadingImagesFromFolder("/data/aluminium_cans", 1);
          loadingImagesFromFolder("/data/paper", 2);
          console.log("Loaded model"); 
          }
        });
        async function loadingImagesFromFolder(folderName, classId) { 
          // Simulate loading images from a folder
          const images = [
            folderName + "/1.jpg",
            folderName + "/2.jpg",
            folderName + "/3.jpg",
            folderName + "/4.jpg",
            folderName + "/5.jpg",
            folderName + "/6.jpg",
            folderName + "/7.jpg",
          ];
          for (const imageUrl of images) {
            const img = new Image();
            img.src = imageUrl;
            img.onload = async function () {
              const activation = net.infer(img, true);
              classifier.addExample(activation, classId);
            };
          }
        }
        async function app() { 
          console.log("Loading MobileNet..."); 
          net = await mobilenet.load(); 
          //when user upload a file to classify
          imageInput.addEventListener("change", (event) => { 
            const file = event.target.files[0]; 
            const reader = new FileReader(); 
            reader.onload = function (e) { 
              uploadedImageElement.src = e.target.result; 
              console.log("Selected file path:", file.name); // Print the selected file path (name) to the console 
            }; 
            reader.readAsDataURL(file); 
          }); 
          submitButton.addEventListener("click", classifyImage);
          uploadedImageElement.addEventListener('load', function () {
            // Show the submit button when the image is loaded
            submitButton.style.display = 'block';
          });
          // Add event listener to the capture button 
        captureButton.addEventListener('click', function () { 
            if (mediaStream) { 
                const canvas = document.createElement('canvas'); 
                const context = canvas.getContext('2d'); 
                canvas.width = cameraStream.videoWidth;
                canvas.height = cameraStream.videoHeight; 
                context.drawImage(cameraStream, 0, 0, canvas.width, canvas.height); 
                const capturedImage = canvas.toDataURL('image/jpeg'); 
                displayCapturedImage(capturedImage); 
                
                camera.style.display = "none";
                captureButton.style.display = "none";
                retakeButton.style.display = "block";

            } 
        }); 
        retakeButton.addEventListener('click', function () { 
            camera.style.display = "block";
            captureButton.style.display = "block";
            retakeButton.style.display = "none";
            submitButton.style.display = 'none';
            uploadedImageElement.src = "";
        });
        } 
    
        async function classifyImage() { 
          const activation = net.infer(uploadedImageElement, "conv_preds"); 
          const result = await classifier.predictClass(activation); 
          const classes = ["Plastic Bottle", "Aluminium Can", "Paper"]; 
          document.getElementById("console").innerText = ` 
            Prediction: ${classes[result.label]}\n 
            Probability: ${result.confidences[result.label]} 
          `; 
        } 
    
        app(); 

        // Function to start the camera and display the stream 
        function startCamera() { 
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) { 
                navigator.mediaDevices.getUserMedia({ video: { width: 1280, height: 720 } }) 
                    .then(function (stream) { 
                        cameraStream.srcObject = stream; 
                        mediaStream = stream; 
                        cameraOffMessage.style.display = 'none'; // Hide camera off message 
                    }) 
                    .catch(function (error) { 
                        console.error('Error accessing camera:', error); 
                        alert('Error accessing camera. Please check your camera permissions.'); 
                        cameraOffMessage.style.display = 'block'; // Show camera off message 
                    }); 
            } else { 
                alert('Your browser does not support camera access.'); 
            } 
        } 
 
        // Start the camera immediately when the page loads 
        window.addEventListener('DOMContentLoaded', startCamera); 
 
        // Function to stop the camera stream 
        function stopCamera() { 
            if (mediaStream) { 
                const tracks = mediaStream.getTracks(); 
                tracks.forEach(track => track.stop()); 
                cameraStream.srcObject = null; 
                mediaStream = null; 
                cameraOffMessage.style.display = 'block'; // Show camera off message 
            } 
        } 
 
        // Add event listener to the camera button 
        cameraButton.addEventListener('click', function () { 
            if (isCameraActive) { 
                stopCamera(); 
                cameraStream.style.display = 'none'; 
            } else { 
                startCamera(); 
                cameraStream.style.display = 'block'; 
            } 
            isCameraActive = !isCameraActive; 
        }); 
 
        // Function to display the captured image 
        function displayCapturedImage(imageData) { 
              uploadedImageElement.src = imageData; 
        } 
    </script> 
</body> 
</html>